{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingridients","className","style","recipe","map","ingridient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","key","label","ingredients","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCa3CC,EAXA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACzC,OACC,yBAAKC,UAAWC,IAAMC,QACrB,4BAAKN,GACL,4BAAKG,EAAYI,KAAI,SAACC,GAAD,OAAgB,4BAAKA,EAAWC,UACrD,2BAAIR,GACJ,yBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,OCgEjCC,G,MArEH,WACX,IADiB,EAIeC,mBAAS,IAJxB,mBAITC,EAJS,KAIAC,EAJA,OAKaF,mBAAS,IALtB,mBAKTG,EALS,KAKDC,EALC,OAMWJ,mBAAS,WANpB,mBAMTK,EANS,KAMFC,EANE,KAQjBC,qBACC,WACCC,MAED,CAAEH,IAGH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAfd,WAec,oBAdb,qCAaG,cACZM,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJC,2CAAH,qDAkBhB,OACC,yBAAKvB,UAAU,OACd,yBAAKA,UAAU,aACd,yDAED,yBAAKA,UAAU,UACd,gEAGD,0BAAM0B,SAfU,SAACC,GAClBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAYkBb,UAAU,eACpC,2BACC6B,YAAY,uDACZ7B,UAAU,aACV8B,KAAK,OACLC,MAAOnB,EACPoB,SA1BiB,SAACL,GACrBd,EAAUc,EAAEM,OAAOF,OACnBP,QAAQC,IAAIb,MA0BV,4BAAQZ,UAAU,gBAAgB8B,KAAK,UAAvC,WAID,yBAAK9B,UAAU,WACbU,EAAQP,KAAI,SAACD,GAAD,OACZ,kBAAC,EAAD,CACCgC,IAAKhC,EAAOA,OAAOiC,MACnBvC,MAAOM,EAAOA,OAAOiC,MACrBtC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOkC,qBCjEbC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCCjCC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsGpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACP9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.46858d98.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__ekJc6\",\"image\":\"recipe_image__3sTVt\"};","import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({ title, calories, image, ingridients }) => {\r\n\treturn (\r\n\t\t<div className={style.recipe}>\r\n\t\t\t<h1>{title}</h1>\r\n\t\t\t<ol>{ingridients.map((ingridient) => <li>{ingridient.text}</li>)}</ol>\r\n\t\t\t<p>{calories}</p>\r\n\t\t\t<img className={style.image} src={image} alt=\"\" />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\tconst APP_ID = 'f53801ba';\n\tconst APP_KEY = 'ea3c5dd9c9e180b13e92f88145902e45';\n\n\tconst [ recipes, setRecipes ] = useState([]);\n\tconst [ search, setSearch ] = useState('');\n\tconst [ query, setQuery ] = useState('chicken');\n\n\tuseEffect(\n\t\t() => {\n\t\t\tgetRecipes();\n\t\t},\n\t\t[ query ]\n\t);\n\n\tconst getRecipes = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t\tconsole.log(data.hits);\n\t};\n\n\tconst updateSearch = (e) => {\n\t\tsetSearch(e.target.value);\n\t\tconsole.log(search);\n\t};\n\n\tconst getSearch = (e) => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch('');\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"headerone\">\n\t\t\t\t<h1>Welcome to Tasty Recipes</h1>\n\t\t\t</div>\n\t\t\t<div className=\"header\">\n\t\t\t\t<h4>Get tasty with the best recipes</h4>\n\t\t\t</div>\n\n\t\t\t<form onSubmit={getSearch} className=\"search-form\">\n\t\t\t\t<input\n\t\t\t\t\tplaceholder=\"Search for your Recipe here e.g Orange Vanilla Shake\"\n\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={search}\n\t\t\t\t\tonChange={updateSearch}\n\t\t\t\t/>\n\t\t\t\t<button className=\"search-button\" type=\"submit\">\n\t\t\t\t\tsearch\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<div className=\"recipes\">\n\t\t\t\t{recipes.map((recipe) => (\n\t\t\t\t\t<Recipe\n\t\t\t\t\t\tkey={recipe.recipe.label}\n\t\t\t\t\t\ttitle={recipe.recipe.label}\n\t\t\t\t\t\tcalories={recipe.recipe.calories}\n\t\t\t\t\t\timage={recipe.recipe.image}\n\t\t\t\t\t\tingridients={recipe.recipe.ingredients}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}